# -*- coding: utf-8 -*-
"""AZTEC_and_DATAMATRİX_barkod_yap.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iB97e0b3H1p9B-4jF7xnqq4Xudej0cgF
"""

from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials
auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)
from google.colab import drive
drive.mount('/content/drive')

!pip install aztec-code-generator
!pip3 install https://github.com/dlenski/aztec_code_generator/archive/master.zip
!pip install pyStrich
!!pip install opencv-python
!pip install barcode-image-composer
!pip install python-barcode pylibdmtx opencv-python pillow
!apt-get -qq install -y barcode-image-composer && pip install -U barcode-image-composer
!pip install argparse
!pip install imgcomposer
!pip3 install pylibdmtx
!sudo apt-get install libdmtx0a
!pip install pylibdmtx
!pip install pylibdmtx[scripts]

import glob
import cv2
import pandas as pd
import pathlib
from pylibdmtx.pylibdmtx import decode
from PIL import Image
from pylibdmtx.pylibdmtx import encode

#https://pypi.org/project/aztec-code-generator/   #yandaki kod linki aztec code oluştur
#https://pypi.org/project/pylibdmtx/   # yandaki kod linki datamatrix oluştur
from pystrich.datamatrix import DataMatrixEncoder
from aztec_code_generator import AztecCode

import pandas as pd
import numpy as np

df1 = pd.read_csv("/content/drive/MyDrive/renkli_qr_Code/datam.csv", error_bad_lines=False)
print(df1.shape)
print(df1.columns)
df1.head()

import re

ss_familles = df1.apply(lambda x: re.split(r"-([a-z]|[0-9]).*", x['Category'])[0], axis=1)
familles = df1.apply(lambda x: x[0].split('-')[0], axis=1)
df1['Category'] = ss_familles

print(f"Number of occurrences for each malware class: \n{df1['Category'].value_counts()}")
# familles

df1['Category'] = familles
print(f"Number of occurrences for each malware class: \n{df1['Category'].value_counts()}")

df1.head()

df1['Category'].value_counts()

df1['Class'].value_counts()

df1.isna().sum().sum()

df1 = df1.dropna()

df1.isna().sum().sum()

df1.info()

label_dict = {
    'Benign': 0,
    'Spyware': 1,
    'Ransomware': 2,
    'Trojan': 3
}
df1['Category'] = [label_dict[item] for item in df1['Category']]

df1.head()

df1['Category'].value_counts()

df1.to_csv("/content/drive/MyDrive/renkli_qr_Code/cleaned_malware_mem.csv")

data = pd.read_csv("/content/drive/MyDrive/renkli_qr_Code/cleaned_malware_mem.csv", error_bad_lines=False)
print(data.columns)
data.head()

df = data.drop( columns = ["Unnamed: 0","Category"])
df.head()
print(df.columns)

def createdatamatrix_and_aztec_Code():

  df = pd.read_csv("/content/drive/MyDrive/renkli_qr_Code/cleaned_malware_mem.csv")
  df = df.drop( columns = ["Unnamed: 0"])

  for index,values in df.iterrows():
    label = values["Category"]
    k1 = values["pslist.nproc"]
    k2 = values["pslist.nppid"]
    k3 = values["pslist.avg_threads"]
    k4 = values["pslist.nprocs64bit"]
    k5 = values["pslist.avg_handlers"]
    k6 = values["dlllist.ndlls"]
    k7 = values["dlllist.avg_dlls_per_proc"]
    k8 = values["handles.nhandles"]
    k9 = values["handles.avg_handles_per_proc"]
    k10 = values["handles.nport"]
    k11 = values["handles.nfile"]
    k12 = values["handles.nevent"]
    k13 = values["handles.ndesktop"]
    k14 = values["handles.nkey"]
    k15 = values["handles.nkey"]
    k16 = values["handles.ndirectory"]
    k17 = values["handles.nsemaphore"]
    k18 = values["handles.ntimer"]
    k19 = values["handles.nsection"]
    k20 = values["handles.nmutant"]
    k21 = values["ldrmodules.not_in_load"]
    k22 = values["ldrmodules.not_in_init"]
    k23 = values["ldrmodules.not_in_mem"]
    k24 = values["ldrmodules.not_in_load_avg"]
    k25 = values["ldrmodules.not_in_init_avg"]
    k26 = values["ldrmodules.not_in_mem_avg"]
    k27 = values["malfind.ninjections"]
    k28 = values["malfind.commitCharge"]
    k29 = values["malfind.protection"]
    k30 = values["malfind.uniqueInjections"]
    k31 = values["psxview.not_in_pslist"]
    k32 = values["psxview.not_in_eprocess_pool"]
    k33 = values["psxview.not_in_ethread_pool"]
    k34 = values["psxview.not_in_pspcid_list"]
    k35 = values["psxview.not_in_csrss_handles"]
    k36 = values["psxview.not_in_session"]
    k37 = values["psxview.not_in_deskthrd"]
    k38 = values["psxview.not_in_pslist_false_avg"]
    k39 = values["psxview.not_in_eprocess_pool_false_avg"]
    k40 = values["psxview.not_in_ethread_pool_false_avg"]
    k41 = values["psxview.not_in_pspcid_list_false_avg"]
    k42 = values["psxview.not_in_csrss_handles_false_avg"]
    k43 = values["psxview.not_in_session_false_avg"]
    k44 = values["psxview.not_in_deskthrd_false_avg"]
    k45 = values["svcscan.nservices"]
    k46 = values["svcscan.kernel_drivers"]
    k47 = values["svcscan.fs_drivers"]
    k48 = values["svcscan.process_services"]
    k49 = values["svcscan.shared_process_services"]
    k50 = values["svcscan.interactive_process_services"]
    k51 = values["svcscan.nactive"]
    k52 = values["callbacks.ncallbacks"]
    k53 = values["callbacks.nanonymous"]
    k54 = values["callbacks.ngeneric"]
    k55 = values["Class"]
    k56 = values["Category"]


    data = f'''
    label:{label}\n
    k1 : {k1}\n
    k2 : {k2}\n
    k3 : {k3}\n
    k4 : {k4}\n
    k5 : {k5}\n
    k6 : {k6}\n
    k7 : {k7}\n
    k8 : {k8}\n
    k9 : {k9}\n
    k10 : {k10}\n
    k11 : {k11}\n
    k12 : {k12}\n
    k13 : {k13}\n
    k14 : {k14}\n
    k15 : {k15}\n
    k16 : {k16}\n
    k17 : {k17}\n
    k18 : {k18}\n
    k19 : {k19}\n
    k20 : {k20}\n
    k21 : {k21}\n
    k22 : {k22}\n
    k23 : {k23}\n
    k24 : {k24}\n
    k25 : {k25}\n
    k26 : {k26}\n
    k27 : {k27}\n
    k28 : {k28}\n
    k29 : {k29}\n
    k30 : {k30}\n
    k31 : {k31}\n
    k32 : {k32}\n
    k33 : {k33}\n
    k34 : {k34}\n
    k35 : {k35}\n
    k36 : {k36}\n
    k37 : {k37}\n
    k38 : {k38}\n
    k39 : {k39}\n
    k40 : {k40}\n
    k41 : {k41}\n
    k42 : {k42}\n
    k43 : {k43}\n
    k44 : {k44}\n
    k45 : {k45}\n
    k46 : {k46}\n
    k47 : {k47}\n
    k48 : {k48}\n
    k49 : {k49}\n
    k50 : {k50}\n
    k51 : {k51}\n
    k52 : {k52}\n
    k53 : {k53}\n
    k54 : {k54}\n
    k55 : {k55}\n
    k56 : {k56}


    '''
    if ( label == 0):
      img = AztecCode(data)
      type(img)  # qrcode.image.pil.PilImage
      img.save(f"/content/drive/MyDrive/renkli_qr_Code/data_AZTEC/malware_normal_aztec/normal_aztec{index}.png")

    if ( label == 1):
      img = AztecCode(data)
      type(img)  # qrcode.image.pil.PilImage
      img.save(f"/content/drive/MyDrive/renkli_qr_Code/data_AZTEC/malware_spyware_aztec/spyware_aztec{index}.png")

    if ( label == 2):
      img = AztecCode(data)
      type(img)  # qrcode.image.pil.PilImage
      img.save(f"/content/drive/MyDrive/renkli_qr_Code/data_AZTEC/malware_ransonware_aztec/ransonware_aztec{index}.png")

    if ( label == 3):
      img = AztecCode(data)
      type(img)  # qrcode.image.pil.PilImage
      img.save(f"/content/drive/MyDrive/renkli_qr_Code/data_AZTEC/malware_trojan_aztec/trojan_aztec{index}.png")

    if ( label == 0):
      encoded = encode(data.encode('utf8'))
      img = Image.frombytes('RGB', (encoded.width, encoded.height), encoded.pixels)
      type(img)  # qrcode.image.pil.PilImage
      img.save(f"/content/drive/MyDrive/renkli_qr_Code/data_MATRIXDATA/malware_normal_matrix/normal_matrix{index}.png" )

    if ( label == 1):
      encoded = encode(data.encode('utf8'))
      img = Image.frombytes('RGB', (encoded.width, encoded.height), encoded.pixels)
      type(img)  # qrcode.image.pil.PilImage
      img.save(f"/content/drive/MyDrive/renkli_qr_Code/data_MATRIXDATA/malware_spyware_matrix/spyware_matrix{index}.png")

    if ( label == 2):
      encoded = encode(data.encode('utf8'))
      img = Image.frombytes('RGB', (encoded.width, encoded.height), encoded.pixels)
      type(img)  # qrcode.image.pil.PilImage
      img.save(f"/content/drive/MyDrive/renkli_qr_Code/data_MATRIXDATA/malware_ransonware_matrix/ransonware_matrix{index}.png")

    if ( label == 3):
      encoded = encode(data.encode('utf8'))
      img = Image.frombytes('RGB', (encoded.width, encoded.height), encoded.pixels)
      type(img)  # qrcode.image.pil.PilImage
      img.save(f"/content/drive/MyDrive/renkli_qr_Code/data_MATRIXDATA/malware_trojan_matrix/trojan_matrix{index}.png")

createdatamatrix_and_aztec_Code()

#dataset link : https://www.kaggle.com/datasets/luccagodoy/obfuscated-malware-memory-2022-cic?resource=download